package simpletodolist.gui;

import java.awt.event.MouseEvent;
import java.util.Iterator;
import java.util.List;
import javax.swing.table.DefaultTableModel;
import simpletodolist.FileHandler;
import simpletodolist.Task;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Marko Mäkeläinen
 */
public class GUIWindow extends javax.swing.JFrame {

    private TaskWindow taskWindow = null;
    private List<Task> taskList;

    private static final int COLUMN_TITLE = 0;
    private static final int COLUMN_DESCRIPTION = 1;
    private static final int COLUMN_DEADLINE = 2;
    private static final int COLUMN_STATUS = 3;

    /**
     * Creates new form GUIWindow
     */
    public GUIWindow() {
        initComponents();

        this.taskWindow = new TaskWindow();
        this.taskWindow.setParentWindow(this);

        // add mouseListener to the table
        TableTodoList.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseClicked(MouseEvent e) {
                int row = TableTodoList.rowAtPoint(e.getPoint());
                int column = TableTodoList.columnAtPoint(e.getPoint());

                // Get double click
                if (e.getClickCount() == 2 && !e.isConsumed()) {
                    e.consume();

                    // Delete column clicked --> delete row and update table
                    if (column == (TableTodoList.getColumnCount() - 1)) {
                        String removeTitle = (String) (((DefaultTableModel) TableTodoList.getModel()).getValueAt(row, COLUMN_TITLE));
                        ((DefaultTableModel) TableTodoList.getModel()).removeRow(row);
                        removeTaskFromTaskList(removeTitle);
                        updateTodoListTable();
                    } 
                    // Edit row
                    else {
                        String[] taskString = new String[TableTodoList.getColumnCount()];

                        // collect row data to string[]
                        for (int col = 0; col < TableTodoList.getColumnCount(); col++) {
                            taskString[col] = (String) TableTodoList.getModel().getValueAt(row, col);
                        }

                        // open taskWindow for editing
                        taskWindow.setSelectedTask(taskString);
                        taskWindow.setVisible(true);
                    }

                }
            }

        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        GUIWindowTitleText = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TableTodoList = new javax.swing.JTable();
        ButtonAddTask = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Simple TodoLIst Application");

        GUIWindowTitleText.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        GUIWindowTitleText.setText("Simple TodoList Application");

        TableTodoList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Task Title", "Descrition", "Deadline", "Completed", "Delete?"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TableTodoList);

        ButtonAddTask.setText("Add Task");
        ButtonAddTask.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonAddTaskActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(GUIWindowTitleText)
                            .addComponent(ButtonAddTask))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(GUIWindowTitleText)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 343, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ButtonAddTask)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles action behind Add Task -Button
     * 
     * @param evt ActionEvent
     */
    private void ButtonAddTaskActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonAddTaskActionPerformed
        if (taskWindow != null) {
            taskWindow.setVisible(true);
        }
    }//GEN-LAST:event_ButtonAddTaskActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUIWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUIWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonAddTask;
    private javax.swing.JLabel GUIWindowTitleText;
    private javax.swing.JTable TableTodoList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    /**
     * Sets taskList for GUIWindow
     * 
     * @param taskList List of existing tasks
     */
    public void setTaskList(List<Task> taskList) {
        this.taskList = taskList;
        this.taskWindow.setTaskList(taskList);
        updateTodoListTable();
    }

    /**
     * Removes the task of given title from the taskList
     * 
     * @param taskToRemoveTitle Title of the task to be removed
     */
    private void removeTaskFromTaskList(String taskToRemoveTitle) {

        synchronized (taskList) {

            boolean taskFound = false;
            Task taskToRemove = null;

            Iterator i = taskList.iterator();
            while (i.hasNext()) {

                Task task = (Task) i.next();
                if (task.getTitle().equals(taskToRemoveTitle)) {
                    taskFound = true;
                    taskToRemove = task;
                    break;
                }

            }

            if (taskFound && taskToRemove != null) {
                taskList.remove(taskToRemove);
            }

        }
    }

    /**
     * Updates TodoList Table
     * 
     * Saves current taskt to JSON file
     */
    public void updateTodoListTable() {

        synchronized (taskList) {

            DefaultTableModel model = (DefaultTableModel) TableTodoList.getModel();
            Iterator i = taskList.iterator();

            // go through existing tasks
            while (i.hasNext()) {
                Task task = (Task) i.next();
                boolean newTaskFound = true;
                
                for (int row = 0; row < model.getRowCount(); row++) {
                    
                    // Task already on the table --> update task
                    if (task.getTitle().equals((String) model.getValueAt(row, COLUMN_TITLE))) {
                        newTaskFound = false;
                        
                        // update columns of the row
                        model.setValueAt(task.getDescription(), row, COLUMN_DESCRIPTION);
                        model.setValueAt(task.getDeadline(), row, COLUMN_DEADLINE);
                        model.setValueAt(task.getStatus(), row, COLUMN_STATUS);
                    }
                }

                // new task found --> add new row to the table
                if (newTaskFound) {
                    model.addRow(task.getTableContent());
                }

            }

        }
        
        // store taskList to JSON
        FileHandler.saveTodoListToJSON(taskList);

    }
}
