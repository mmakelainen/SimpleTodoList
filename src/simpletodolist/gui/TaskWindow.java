/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package simpletodolist.gui;

import java.time.LocalDateTime;
import java.util.Iterator;
import java.util.List;
import simpletodolist.Task;


/**
 * Task window provides UI for adding new tasks or updating existing tasks.
 * 
 * @author Marko Mäkeläinen
 */
public class TaskWindow extends javax.swing.JFrame {

    private GUIWindow parent = null;
    private List<Task> taskList;

    /**
     * Creates new form TaskWindow
     */
    public TaskWindow() {
        initComponents();
        initInputFields();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelTaskWindowBackground = new javax.swing.JPanel();
        TaskWindowTitleText = new javax.swing.JLabel();
        LabelTitle = new javax.swing.JLabel();
        TextFieldTitle = new javax.swing.JTextField();
        LabelDescription = new javax.swing.JLabel();
        TextFieldDescription = new javax.swing.JTextField();
        LabelDeadline = new javax.swing.JLabel();
        TextFieldDeadline = new javax.swing.JTextField();
        ButtonDone = new javax.swing.JButton();
        ButtonCancel = new javax.swing.JButton();
        LabelStatus = new javax.swing.JLabel();
        ComboBoxStatus = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        PanelTaskWindowBackground.setName("Task Window"); // NOI18N

        TaskWindowTitleText.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        TaskWindowTitleText.setText("Task:");

        LabelTitle.setText("Title:");

        LabelDescription.setText("Description:");

        LabelDeadline.setText("Deadline: (yyyy-mm-dd-hh-mm)");

        ButtonDone.setText("Done");
        ButtonDone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonDoneActionPerformed(evt);
            }
        });

        ButtonCancel.setText("Cancel");
        ButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonCancelActionPerformed(evt);
            }
        });

        LabelStatus.setText("Status:");

        ComboBoxStatus.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Open", "Ongoing", "Done" }));

        javax.swing.GroupLayout PanelTaskWindowBackgroundLayout = new javax.swing.GroupLayout(PanelTaskWindowBackground);
        PanelTaskWindowBackground.setLayout(PanelTaskWindowBackgroundLayout);
        PanelTaskWindowBackgroundLayout.setHorizontalGroup(
            PanelTaskWindowBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTaskWindowBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelTaskWindowBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(TextFieldTitle)
                    .addComponent(TextFieldDescription)
                    .addComponent(TextFieldDeadline)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelTaskWindowBackgroundLayout.createSequentialGroup()
                        .addComponent(ButtonCancel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(ButtonDone))
                    .addGroup(PanelTaskWindowBackgroundLayout.createSequentialGroup()
                        .addGroup(PanelTaskWindowBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(TaskWindowTitleText)
                            .addComponent(LabelTitle)
                            .addComponent(LabelDescription)
                            .addComponent(LabelDeadline)
                            .addComponent(LabelStatus)
                            .addComponent(ComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 108, Short.MAX_VALUE)))
                .addContainerGap())
        );
        PanelTaskWindowBackgroundLayout.setVerticalGroup(
            PanelTaskWindowBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelTaskWindowBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(TaskWindowTitleText)
                .addGap(18, 18, 18)
                .addComponent(LabelTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelDescription)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelDeadline)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(TextFieldDeadline, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(LabelStatus)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ComboBoxStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 28, Short.MAX_VALUE)
                .addGroup(PanelTaskWindowBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ButtonDone)
                    .addComponent(ButtonCancel))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelTaskWindowBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(PanelTaskWindowBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Handles Actions behind Done-Button
     * 
     * @param evt ActionEvent from Button pressed
     */
    private void ButtonDoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonDoneActionPerformed
        String title = TextFieldTitle.getText();
        String description = TextFieldDescription.getText();
        String deadline = TextFieldDeadline.getText();
        String status = (String) ComboBoxStatus.getSelectedItem();

        // TODO: input value verifying here if needed
        
        // Check if the task is already existing
        synchronized (taskList) {
            Iterator i = taskList.iterator();
            boolean newTaskFound = true;

            while (i.hasNext()) {
                Task task = (Task) i.next();

                // if task already exist --> update task info
                if (title.equals(task.getTitle())) {
                    newTaskFound = false;
                    task.setDescription(description);
                    task.setDeadline(deadline);
                    task.setStatus(status);
                }
            }

            // New Task Found --> add new task
            if (newTaskFound) {
                // Add new task
                Task newTask = new Task(title, description, deadline, (String) ComboBoxStatus.getSelectedItem());
                this.taskList.add(newTask);
            }
        }
        // update table
        parent.updateTodoListTable();

        // init input fields for next actions and close window
        initInputFields();
        this.dispose();
    }//GEN-LAST:event_ButtonDoneActionPerformed

    /**
     * Handles action behind Cancel-Button
     * @param evt ActionEvent from Button pressed
     */
    private void ButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonCancelActionPerformed
        initInputFields();
        this.dispose();
    }//GEN-LAST:event_ButtonCancelActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TaskWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TaskWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TaskWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TaskWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TaskWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonCancel;
    private javax.swing.JButton ButtonDone;
    private javax.swing.JComboBox<String> ComboBoxStatus;
    private javax.swing.JLabel LabelDeadline;
    private javax.swing.JLabel LabelDescription;
    private javax.swing.JLabel LabelStatus;
    private javax.swing.JLabel LabelTitle;
    private javax.swing.JPanel PanelTaskWindowBackground;
    private javax.swing.JLabel TaskWindowTitleText;
    private javax.swing.JTextField TextFieldDeadline;
    private javax.swing.JTextField TextFieldDescription;
    private javax.swing.JTextField TextFieldTitle;
    // End of variables declaration//GEN-END:variables

    /**
     * Initialize input fields
     */
    protected void initInputFields() {
        
        // Get current local time for deadline
        LocalDateTime timeNow = LocalDateTime.now();
        
        this.TextFieldTitle.setText("");
        this.TextFieldDescription.setText("");
        this.TextFieldDeadline.setText(timeNow.getYear() + "-"
                + timeNow.getMonthValue() + "-"
                + timeNow.getDayOfMonth() + "-"
                + timeNow.getHour() + ":" 
                + timeNow.getMinute() );
        this.ComboBoxStatus.setSelectedItem(Task.STATUS_OPEN_INDEX);
    }

    /**
     * Sets parent GUI window
     * @param parent Parent GUIWindow
     */
    public void setParentWindow(GUIWindow parent) {
        this.parent = parent;
    }

    /**
     * Set Parameters of the selected task for editing
     * @param taskString String[] Task information
     */
    public void setSelectedTask(String[] taskString) {
        this.TextFieldTitle.setText(taskString[0]);
        this.TextFieldDescription.setText(taskString[1]);
        this.TextFieldDeadline.setText(taskString[2]);

        // set combobox for the task status
        switch (taskString[3]) {
            case Task.STATUS_OPEN:
                this.ComboBoxStatus.setSelectedItem(Task.STATUS_OPEN_INDEX);
                break;
            case Task.STATUS_ONGOING:
                this.ComboBoxStatus.setSelectedItem(Task.STATUS_ONGOING_INDEX);
                break;
            case Task.STATUS_DONE:
                this.ComboBoxStatus.setSelectedItem(Task.STATUS_DONE_INDEX);
                break;
        }
    }
    
    /**
     * Sets task list to TaskWindow
     * @param taskList TaskList of TodoList Table
     */
    public void setTaskList(List<Task> taskList) {
        this.taskList = taskList;
    }
}
